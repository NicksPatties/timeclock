import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt' // required to generate helper code for Room DB
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.nickspatties.timeclock"
        minSdk 21
        targetSdk 31
        compileSdk 33
        versionCode 1
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Default dependencies
    implementation "androidx.core:core-ktx:$core_arch_version"
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'

    // Jetpack Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.activity:activity-compose:1.5.1"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    // Note that constraint layout's compose implementation has a different version than compose!
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"

    // Accompanist
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"

    // DataStore
    implementation "androidx.datastore:datastore-preferences:$datastore_version"

    // Room database
    implementation "androidx.room:room-runtime:$room_version" // do I need
    implementation "androidx.room:room-ktx:$room_version"     // both of these?
    kapt "androidx.room:room-compiler:$room_version"

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    testImplementation "android.arch.core:core-testing:$core_arch_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "pl.pragmatists:JUnitParams:1.1.1"
}

// borrowed from @shubham-chaudhary: https://stackoverflow.com/a/36130467
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '*  ', endItem = '  *'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('*' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('*' * repeatLength))
            }
        }
    }
}